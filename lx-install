#!/usr/bin/env php
<?php
/**
 * This script creates directory 'lx' to the project root directory. This is a heart of the platform
 * The directory contains:
 * 1. Directory 'config' - configuration for the platform
 * 2. File 'lx' for launch platform CLI
 * 3. Directory '.system' for caches, temp files etc
 */

use lx\AutoloadMapBuilder;
use lx\Directory;
use lx\AssetCompiler;
use lx\JsModuleMapBuilder;

// fcgi doesn't have STDIN and STDOUT defined by default
defined('STDIN') or define('STDIN', fopen('php://stdin', 'r'));
defined('STDOUT') or define('STDOUT', fopen('php://stdout', 'w'));

require_once(__DIR__ . '/main.php');
$site = new Directory(lx::$conductor->sitePath);

$lx = $site->getOrMakeDirectory('services');

$lx = $site->getOrMakeDirectory('lx');
$system = $lx->getOrMakeDirectory('.system');
$system->getOrMakeDirectory('temp');

$gitignore = $site->makeFile('.gitignore');
if ($gitignore->exists()) {
    $str = '';
    $text = $gitignore->get();
    if ( ! preg_match('/\/lx\/.system\b/', $text)) {
        $str .= '# lx local system dir' . PHP_EOL . '/lx/.system' . PHP_EOL . PHP_EOL;
    }
    if ( ! preg_match('/\/vendor\b/', $text)) {
        $str .= '# composer vendor dir' . PHP_EOL . '/vendor' . PHP_EOL . PHP_EOL;
    }
    $str .= $text;
} else {
	$str = '# lx local system dir' . PHP_EOL . '/lx/.system' . PHP_EOL . PHP_EOL;
	$str .= '# composer vendor dir' . PHP_EOL . '/vendor' . PHP_EOL . PHP_EOL;
}
$gitignore->put($str);

require(__DIR__ . '/install-src/lxConsole.php');
/**
 * @var $lxConsoleCode
 */
$lxConsole = $lx->makeFile('lx');
$lxConsole->put($lxConsoleCode);

$firstConfig = [];
if (!$lx->contains('config')) {
	$config = $lx->makeDirectory('config');

	require(__DIR__ . '/install-src/configTpl.php');
	/**
	 * @var $configMainCode
	 * @var $configRoutesCode
	 * @var $configPluginCode
	 * @var $configServiceCode
	 */

	$configMain = $config->makeFile('main.php');
	$configMain->put($configMainCode);

	$configRoutes = $config->makeFile('routes.php');
	$configRoutes->put($configRoutesCode);

	$configPlugin = $config->makeFile('plugin.php');
	$configPlugin->put($configPluginCode);

	$configService = $config->makeFile('service.php');
	$configService->put($configServiceCode);

    $firstConfig = [
        'packagesMap' => [
            'vendor',
            'services',
        ],
        'aliases' => [
            'services' => '@site/services',
        ],
    ];
} else {
    $configMain = $lx->get('config/main.php');
    if ($configMain->exists()) {
        $firstConfig = lx\PhpConfigHelper::get($configMain, ['packagesMap', 'aliases']);
    } else {
        $configMain = new lx\DataFile($configMain->getPath());
        $data = $configMain->get();
        $firstConfig = [
            'packagesMap' => $data['packagesMap'] ?? [],
            'aliases' => $data['aliases'] ?? [],
        ];
    }
}

$data = $lx->getOrMakeDirectory('data');
if (!$data->contains('languages.php')) {
	$languages = $data->makeFile('languages.php');
	$languages->put(require(__DIR__ . '/install-src/data/languages.php'));
}

$firstConfig[lx\AbstractApplication::CONFIG_KEY_CONSTRUCT_FLAGS] = [
    lx\AbstractApplication::CONSTRUCT_FLAG_IGNORE_CONFIG => true,
];
$app = new lx\ConsoleApplication($firstConfig);

(new AutoloadMapBuilder())->createCommonAutoloadMap();
lx::$autoloader->map->reset();
(new JsModuleMapBuilder())->renewHead();

$web = $site->getOrMakeDirectory('web');
$cssCompiler = new AssetCompiler();
$cssCompiler->copyLxCss();
$cssCompiler->makePluginsAssetLinks();

lx\Console::outln('Done');
